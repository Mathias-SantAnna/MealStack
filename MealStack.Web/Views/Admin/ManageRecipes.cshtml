@model IEnumerable<MealStack.Infrastructure.Data.RecipeEntity>

@{
ViewData["Title"] = "Manage Recipes";
Layout = "_Layout";
}

<div class="container py-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1>Recipe Management</h1>
            <p class="text-muted mb-0">Manage all recipes in the system with advanced search and bulk operations.</p>
        </div>
        <div class="d-flex align-items-center gap-3">
            <span class="badge bg-primary fs-6">@Model.Count() Recipes</span>
            <a asp-controller="Recipe" asp-action="Create" class="btn btn-success">
                <i class="bi bi-plus-circle me-1"></i> Create New Recipe
            </a>
        </div>
    </div>

    <!-- Search & Filters Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-search me-2"></i>Search & Filters
                </h5>
                <button class="btn btn-sm btn-outline-secondary" type="button"
                        data-bs-toggle="collapse" data-bs-target="#advancedFilters"
                        aria-expanded="false">
                    <i class="bi bi-sliders me-1"></i>Advanced
                </button>
            </div>
        </div>
        <div class="card-body">
            <form id="searchFilterForm" method="get" asp-action="ManageRecipes">
                <!-- Basic Search Row -->
                <div class="row g-3 align-items-end mb-3">
                    <!-- Search Input -->
                    <div class="col-md-5">
                        <label for="searchTerm" class="form-label">Search</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" id="searchTerm" name="searchTerm"
                                   placeholder="Search recipes by title, description, or ingredients..."
                                   value="@ViewData["SearchTerm"]">
                            <button type="button" class="btn btn-outline-secondary" id="clearSearch">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Sort By -->
                    <div class="col-md-3">
                        <label for="sortBy" class="form-label">Sort By</label>
                        <select class="form-select" id="sortBy" name="sortBy">
                            <option value="newest" selected="@(ViewData["SortBy"]?.ToString() == "newest")">Newest First</option>
                            <option value="oldest" selected="@(ViewData["SortBy"]?.ToString() == "oldest")">Oldest First</option>
                            <option value="title" selected="@(ViewData["SortBy"]?.ToString() == "title")">Title A-Z</option>
                            <option value="difficulty" selected="@(ViewData["SortBy"]?.ToString() == "difficulty")">Difficulty</option>
                            <option value="rating" selected="@(ViewData["SortBy"]?.ToString() == "rating")">Highest Rated</option>
                        </select>
                    </div>

                    <!-- Actions -->
                    <div class="col-md-4">
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary flex-fill">
                                <i class="bi bi-search me-1"></i>Search
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="resetFilters">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Categories Filter -->
                @if (ViewBag.Categories != null)
                {
                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label">Categories</label>
                        <div class="d-flex flex-wrap gap-2">
                            <a href="@Url.Action("ManageRecipes")"
                               class="btn @(ViewBag.SelectedCategoryId == null ? "btn-primary" : "btn-outline-primary") btn-sm">
                                All
                            </a>
                            @foreach (var category in ViewBag.Categories)
                            {
                            <a href="@Url.Action("ManageRecipes", new { categoryId = category.Id, searchTerm = ViewData["SearchTerm"], sortBy = ViewData["SortBy"] })"
                               class="btn @(ViewBag.SelectedCategoryId == category.Id ? "btn-primary" : "btn-outline-primary") btn-sm">
                                @category.Name
                            </a>
                            }
                        </div>
                    </div>
                </div>
                }

                <!-- Advanced Filters (Collapsible) -->
                <div class="collapse" id="advancedFilters">
                    <div class="border-top pt-3">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label for="difficultyFilter" class="form-label">Difficulty</label>
                                <select class="form-select" id="difficultyFilter" name="difficulty">
                                    <option value="">Any Difficulty</option>
                                    <option value="Easy" selected="@(ViewData["Difficulty"]?.ToString() == "Easy")">Easy</option>
                                    <option value="Medium" selected="@(ViewData["Difficulty"]?.ToString() == "Medium")">Medium</option>
                                    <option value="Hard" selected="@(ViewData["Difficulty"]?.ToString() == "Hard")">Hard</option>
                                </select>
                            </div>

                            <div class="col-md-3">
                                <label for="timeFilter" class="form-label">Max Total Time</label>
                                <select class="form-select" id="timeFilter" name="timeFilter">
                                    <option value="">Any Time</option>
                                    <option value="15" selected="@(ViewData["TimeFilter"]?.ToString() == "15")">Under 15 min</option>
                                    <option value="30" selected="@(ViewData["TimeFilter"]?.ToString() == "30")">Under 30 min</option>
                                    <option value="60" selected="@(ViewData["TimeFilter"]?.ToString() == "60")">Under 1 hour</option>
                                    <option value="120" selected="@(ViewData["TimeFilter"]?.ToString() == "120")">Under 2 hours</option>
                                </select>
                            </div>

                            <div class="col-md-6">
                                <label for="ingredientFilter" class="form-label">Contains Ingredients</label>
                                <input type="text" class="form-control" id="ingredientFilter" name="ingredients"
                                       placeholder="e.g., chicken, garlic, onion" value="@ViewData["Ingredients"]">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Hidden fields to maintain state -->
                @if (ViewBag.SelectedCategoryId != null)
                {
                <input type="hidden" name="categoryId" value="@ViewBag.SelectedCategoryId">
                }
            </form>
        </div>
    </div>

    <!-- Bulk Actions Panel (Initially Hidden) -->
    <div class="card shadow-sm mb-4 d-none" id="bulkActionsPanel">
        <div class="card-header bg-warning text-dark">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-check2-square me-2"></i>Bulk Actions
                    <span class="badge bg-primary ms-2" id="selectedCount">0</span> selected
                </h5>
                <button type="button" class="btn btn-sm btn-outline-dark" id="clearBulkSelection">
                    <i class="bi bi-x me-1"></i>Clear Selection
                </button>
            </div>
        </div>
        <div class="card-body">
            <form id="bulkActionForm" method="post" asp-action="BulkAction">
                @Html.AntiForgeryToken()
                <div class="row g-3">
                    <div class="col-md-4">
                        <label for="bulkAction" class="form-label">Choose Action</label>
                        <select class="form-select" id="bulkAction" name="bulkAction" required>
                            <option value="">Select an action...</option>
                            <option value="addCategories">Add Categories</option>
                            <option value="removeCategories">Remove Categories</option>
                            <option value="changeDifficulty">Change Difficulty</option>
                            <option value="export">Export Selected</option>
                            <option value="delete">Delete Selected</option>
                        </select>
                    </div>
                    <div class="col-md-4" id="bulkActionOptions">
                        <!-- Dynamic options based on selected action -->
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button type="submit" class="btn btn-warning w-100" id="executeBulkAction">
                            <i class="bi bi-lightning-charge me-1"></i>Execute Action
                        </button>
                    </div>
                </div>
                <!-- Hidden field for selected IDs -->
                <input type="hidden" id="selectedIds" name="selectedIds" />
            </form>
        </div>
    </div>

    <!-- Main Content Card -->
    <div class="card shadow-sm">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <div class="form-check me-3">
                    <input class="form-check-input" type="checkbox" id="selectAllItems">
                    <label class="form-check-label" for="selectAllItems">
                        Select All
                    </label>
                </div>
                <h5 class="mb-0">Recipe Management Dashboard</h5>
            </div>
            <span class="badge bg-primary rounded-pill">@Model.Count() total</span>
        </div>

        <!-- Content Body -->
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover table-striped mb-0" id="managementTable">
                    <thead class="table-light">
                    <tr>
                        <th scope="col" style="width: 40px;">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="selectAllHeader">
                            </div>
                        </th>
                        <th scope="col">Recipe</th>
                        <th scope="col">Image</th>
                        <th scope="col">Difficulty</th>
                        <th scope="col">Categories</th>
                        <th scope="col">Time</th>
                        <th scope="col">Rating</th>
                        <th scope="col">Author</th>
                        <th scope="col">Created</th>
                        <th scope="col" style="width: 200px;">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (Model != null && Model.Any())
                    {
                    @foreach (var recipe in Model)
                    {
                    <tr data-item-id="@recipe.Id" class="management-table-row">
                        <td>
                            <div class="form-check">
                                <input class="form-check-input item-checkbox" type="checkbox"
                                       value="@recipe.Id" id="item_@recipe.Id">
                            </div>
                        </td>
                        <td>
                            <a href="@Url.Action("Details", "Recipe", new { id = recipe.Id })"
                               class="text-decoration-none fw-semibold">
                                @recipe.Title
                            </a>
                            @if (!string.IsNullOrEmpty(recipe.Description))
                            {
                            <div class="text-muted small">@recipe.Description.Substring(0, Math.Min(60, recipe.Description.Length))@(recipe.Description.Length > 60 ? "..." : "")</div>
                            }
                        </td>
                        <td class="text-center">
                            @if (!string.IsNullOrEmpty(recipe.ImagePath))
                            {
                            <img src="@recipe.ImagePath" alt="@recipe.Title" class="img-thumbnail" style="max-height: 40px; max-width: 60px;" loading="lazy" />
                            }
                            else
                            {
                            <div class="bg-light rounded d-flex align-items-center justify-content-center" style="width: 60px; height: 40px;">
                                <i class="bi bi-image text-muted"></i>
                            </div>
                            }
                        </td>
                        <td>
                                        <span class="badge bg-@(recipe.Difficulty == MealStack.Infrastructure.Data.DifficultyLevel.Easy ? "success" :
                                        recipe.Difficulty == MealStack.Infrastructure.Data.DifficultyLevel.Medium ? "warning text-dark" : "danger")">
                                            @recipe.Difficulty
                                        </span>
                        </td>
                        <td>
                            @if (recipe.RecipeCategories != null && recipe.RecipeCategories.Any())
                            {
                            <div class="d-flex flex-wrap gap-1">
                                @foreach (var recipeCategory in recipe.RecipeCategories.Take(2))
                                {
                                <span class="badge bg-info text-dark">@recipeCategory.Category.Name</span>
                                }
                                @if (recipe.RecipeCategories.Count() > 2)
                                {
                                <span class="badge bg-light text-dark">+@(recipe.RecipeCategories.Count() - 2) more</span>
                                }
                            </div>
                            }
                            else
                            {
                            <span class="text-muted">-</span>
                            }
                        </td>
                        <td class="text-nowrap">
                            @{
                            var totalTime = recipe.PrepTimeMinutes + recipe.CookTimeMinutes;
                            }
                            @if (totalTime >= 60)
                            {
                            var hours = totalTime / 60;
                            var minutes = totalTime % 60;
                            <span>@hours h @minutes m</span>
                            }
                            else
                            {
                            <span>@totalTime min</span>
                            }
                        </td>
                        <td>
                            @if (recipe.AverageRating > 0)
                            {
                            <div class="d-flex align-items-center">
                                @for (int i = 1; i <= 5; i++)
                                {
                                @if (i <= Math.Floor(recipe.AverageRating))
                                {
                                <i class="bi bi-star-fill text-warning"></i>
                                }
                                else if (i - 0.5 <= recipe.AverageRating)
                                {
                                <i class="bi bi-star-half text-warning"></i>
                                }
                                else
                                {
                                <i class="bi bi-star text-muted"></i>
                                }
                                }
                                <span class="ms-1 small text-muted">(@recipe.AverageRating.ToString("0.0"))</span>
                            </div>
                            }
                            else
                            {
                            <span class="text-muted">No ratings</span>
                            }
                        </td>
                        <td>
                            @if (recipe.CreatedBy != null)
                            {
                            <div class="d-flex align-items-center">
                                <div class="rounded-circle bg-secondary text-white d-flex align-items-center justify-content-center me-2"
                                     style="width: 24px; height: 24px; font-size: 0.75rem; font-weight: 600;">
                                    @recipe.CreatedBy.UserName.FirstOrDefault().ToString().ToUpper()
                                </div>
                                <span class="small">@recipe.CreatedBy.UserName</span>
                            </div>
                            }
                            else
                            {
                            <span class="text-muted">Unknown</span>
                            }
                        </td>
                        <td class="text-nowrap">
                            <span title="@recipe.CreatedDate.ToString("F")">@recipe.CreatedDate.ToString("MMM d, yyyy")</span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a asp-controller="Recipe" asp-action="Details" asp-route-id="@recipe.Id"
                                   class="btn btn-sm btn-outline-info" title="View details">
                                    <i class="bi bi-eye"></i>
                                    <span class="d-none d-lg-inline ms-1">View</span>
                                </a>
                                <a asp-controller="Recipe" asp-action="Edit" asp-route-id="@recipe.Id"
                                   class="btn btn-sm btn-outline-primary" title="Edit recipe">
                                    <i class="bi bi-pencil"></i>
                                    <span class="d-none d-lg-inline ms-1">Edit</span>
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-danger delete-item-btn"
                                        data-item-id="@recipe.Id" data-item-name="@recipe.Title"
                                        title="Delete recipe">
                                    <i class="bi bi-trash"></i>
                                    <span class="d-none d-lg-inline ms-1">Delete</span>
                                </button>
                            </div>

                            <!-- Hidden delete form -->
                            <form id="delete-form-@recipe.Id" asp-controller="Recipe"
                                  asp-action="Delete" asp-route-id="@recipe.Id"
                                  method="post" style="display: none;">
                                @Html.AntiForgeryToken()
                            </form>
                        </td>
                    </tr>
                    }
                    }
                    else
                    {
                    <tr>
                        <td colspan="10" class="text-center py-5">
                            <div class="text-muted">
                                <i class="bi bi-inbox display-1 d-block mb-3"></i>
                                <h5>No recipes found</h5>
                                <p>There are no recipes matching your search criteria.</p>
                                <a asp-controller="Recipe" asp-action="Create" class="btn btn-primary">
                                    <i class="bi bi-plus-circle me-1"></i>Create First Recipe
                                </a>
                            </div>
                        </td>
                    </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination Footer -->
        @if (ViewBag.TotalPages > 1)
        {
        <div class="card-footer bg-light">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center mb-0">
                    @if (ViewBag.CurrentPage > 1)
                    {
                    <li class="page-item">
                        <a class="page-link" asp-action="ManageRecipes" asp-route-page="@(ViewBag.CurrentPage - 1)"
                           asp-route-searchTerm="@ViewData["SearchTerm"]" asp-route-sortBy="@ViewData["SortBy"]">Previous</a>
                    </li>
                    }

                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-action="ManageRecipes" asp-route-page="@i"
                           asp-route-searchTerm="@ViewData["SearchTerm"]" asp-route-sortBy="@ViewData["SortBy"]">@i</a>
                    </li>
                    }

                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                    <li class="page-item">
                        <a class="page-link" asp-action="ManageRecipes" asp-route-page="@(ViewBag.CurrentPage + 1)"
                           asp-route-searchTerm="@ViewData["SearchTerm"]" asp-route-sortBy="@ViewData["SortBy"]">Next</a>
                    </li>
                    }
                </ul>
            </nav>
        </div>
        }
    </div>

    <!-- Back Button -->
    <div class="text-center mt-4">
        <a asp-controller="Admin" asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i>Back to Admin Dashboard
        </a>
    </div>
</div>

@section Scripts {
<script>
    $(document).ready(function() {
        // Recipe Management functionality
        const RecipeManagement = {
            selectedItems: new Set(),

            init: function() {
                this.setupSearch();
                this.setupBulkActions();
                this.setupDeleteButtons();
            },

            setupSearch: function() {
                let searchTimeout;
                const searchInput = $('#searchTerm');
                const clearBtn = $('#clearSearch');

                // Clear search
                clearBtn.on('click', function() {
                    searchInput.val('').focus();
                    $('#searchFilterForm').submit();
                });

                // Form submission
                $('#searchFilterForm').on('submit', function(e) {
                    // Allow normal form submission
                });

                // Reset filters
                $('#resetFilters').on('click', function() {
                    $('#searchFilterForm')[0].reset();
                    $('#searchFilterForm').submit();
                });
            },

            setupBulkActions: function() {
                const selectAllCheckbox = $('#selectAllItems, #selectAllHeader');
                const bulkPanel = $('#bulkActionsPanel');
                const selectedCountBadge = $('#selectedCount');
                const clearSelectionBtn = $('#clearBulkSelection');

                // Select all functionality
                selectAllCheckbox.on('change', function() {
                    const isChecked = this.checked;
                    $('.item-checkbox').prop('checked', isChecked);
                    selectAllCheckbox.prop('checked', isChecked);
                    RecipeManagement.updateBulkSelection();
                });

                // Individual item selection
                $(document).on('change', '.item-checkbox', function() {
                    RecipeManagement.updateBulkSelection();
                });

                // Clear bulk selection
                clearSelectionBtn.on('click', function() {
                    $('.item-checkbox, #selectAllItems, #selectAllHeader').prop('checked', false);
                    RecipeManagement.updateBulkSelection();
                });

                // Bulk action form submission
                $('#bulkActionForm').on('submit', function(e) {
                    e.preventDefault();
                    RecipeManagement.executeBulkAction();
                });

                // Dynamic bulk action options
                $('#bulkAction').on('change', function() {
                    RecipeManagement.showBulkActionOptions($(this).val());
                });
            },

            updateBulkSelection: function() {
                const selectedCheckboxes = $('.item-checkbox:checked');
                const selectedCount = selectedCheckboxes.length;
                const totalCheckboxes = $('.item-checkbox').length;

                // Update selected items set
                this.selectedItems.clear();
                selectedCheckboxes.each(function() {
                    RecipeManagement.selectedItems.add($(this).val());
                });

                // Update UI
                $('#selectedCount').text(selectedCount);

                if (selectedCount > 0) {
                    $('#bulkActionsPanel').removeClass('d-none');
                } else {
                    $('#bulkActionsPanel').addClass('d-none');
                }

                // Update select all state
                const selectAllCheckboxes = $('#selectAllItems, #selectAllHeader');
                if (selectedCount === 0) {
                    selectAllCheckboxes.prop('indeterminate', false).prop('checked', false);
                } else if (selectedCount === totalCheckboxes) {
                    selectAllCheckboxes.prop('indeterminate', false).prop('checked', true);
                } else {
                    selectAllCheckboxes.prop('indeterminate', true).prop('checked', false);
                }
            },

            showBulkActionOptions: function(action) {
                const optionsContainer = $('#bulkActionOptions');
                optionsContainer.empty();

                switch(action) {
                    case 'addCategories':
                    case 'removeCategories':
                        optionsContainer.html(`
                            <label class="form-label">Select Categories</label>
                            <select class="form-select" name="categoryIds" multiple required>
                                @if (ViewBag.Categories != null)
                        {
                        @foreach (var category in ViewBag.Categories)
                        {
                        <option value="@category.Id">@category.Name</option>
                        }
                        }
                            </select>
                        `);
                        break;
                    case 'changeDifficulty':
                        optionsContainer.html(`
                            <label class="form-label">New Difficulty</label>
                            <select class="form-select" name="newDifficulty" required>
                                <option value="Easy">Easy</option>
                                <option value="Medium">Medium</option>
                                <option value="Hard">Hard</option>
                            </select>
                        `);
                        break;
                    case 'export':
                        optionsContainer.html(`
                            <label class="form-label">Export Format</label>
                            <select class="form-select" name="exportFormat" required>
                                <option value="csv">CSV</option>
                                <option value="json">JSON</option>
                                <option value="pdf">PDF</option>
                            </select>
                        `);
                        break;
                    case 'delete':
                        optionsContainer.html(`
                            <div class="alert alert-warning mb-0">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <strong>Warning:</strong> This will permanently delete all selected recipes.
                            </div>
                        `);
                        break;
                }
            },

            executeBulkAction: function() {
                const action = $('#bulkAction').val();
                const selectedIds = Array.from(this.selectedItems);

                if (!action || selectedIds.length === 0) {
                    alert('Please select an action and at least one recipe.');
                    return;
                }

                if (action === 'delete' && !confirm(`Are you sure you want to delete ${selectedIds.length} recipes? This action cannot be undone.`)) {
                    return;
                }

                // Update hidden field
                $('#selectedIds').val(selectedIds.join(','));

                alert(`Bulk action "${action}" for ${selectedIds.length} recipes would be executed here. This feature is not yet finished.`);
            },

            setupDeleteButtons: function() {
                $('.delete-item-btn').on('click', function() {
                    const itemId = $(this).data('item-id');
                    const itemName = $(this).data('item-name');

                    if (confirm(`Are you sure you want to delete "${itemName}"? This action cannot be undone.`)) {
                        $(`#delete-form-${itemId}`).submit();
                    }
                });
            }
        };

        RecipeManagement.init();
    });
</script>
}