@model MealStack.Infrastructure.Data.RecipeEntity

@{
    ViewData["Title"] = Model.Title;
}

<div class="container py-4">
    <!-- Recipe Header -->
    <div class="modules-header shadow-sm">
        <div class="row">
            <div class="col-lg-8">
                <h1 class="mb-3">@Model.Title</h1>
                <p class="lead">@Model.Description</p>
                
                <!-- Favorite Button -->
                @if (User.Identity.IsAuthenticated)
                {
                    <div class="favorite-container mb-3" data-recipe-id="@Model.Id">
                        <button class="favorite-btn @(ViewBag.IsFavorited ? "favorited" : "")" 
                                data-recipe-id="@Model.Id" 
                                data-is-favorite="@(ViewBag.IsFavorited ? "true" : "false")"
                                aria-label="@(ViewBag.IsFavorited ? "Remove from favorites" : "Add to favorites")">
                            <i class="bi @(ViewBag.IsFavorited ? "bi-heart-fill text-danger" : "bi-heart") fs-5"></i>
                        </button>
                    </div>
                }
                
                <!-- Rating System -->
                @if (User.Identity.IsAuthenticated)
                {
                    <div class="rating-widget mb-3" data-recipe-id="@Model.Id" data-user-rating="@ViewBag.UserRating">
                        <h6>Rate this recipe:</h6>
                        <div class="rating-stars">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="bi bi-@(ViewBag.UserRating != null && ViewBag.UserRating >= i ? "star-fill" : "star") star-rating" data-rating="@i"></i>
                            }
                        </div>
                        <div class="current-rating mt-2">
                            Average: <span id="average-rating" class="average-rating">@Model.AverageRating.ToString("0.0")</span> stars
                            (<span id="total-ratings" class="total-ratings">@Model.TotalRatings</span> ratings)
                        </div>
                    </div>
                }
                
                <!-- Recipe Meta Information -->
                <div class="modules-meta">
                    <div class="modules-meta-item">
                        <i class="bi bi-alarm text-primary"></i>
                        <span>Prep: @Model.PrepTimeMinutes min</span>
                    </div>
                    <div class="modules-meta-item">
                        <i class="bi bi-fire text-primary"></i>
                        <span>Cook: @Model.CookTimeMinutes min</span>
                    </div>
                    <div class="modules-meta-item">
                        <i class="bi bi-clock-history text-primary"></i>
                        <span>Total: @(Model.PrepTimeMinutes + Model.CookTimeMinutes) min</span>
                    </div>
                    <div class="modules-meta-item">
                        <i class="bi bi-people text-primary"></i>
                        <span>Serves: @Model.Servings</span>
                    </div>
                    <div class="modules-meta-item">
                        <i class="bi bi-bar-chart text-primary"></i>
                        <span class="badge bg-@(Model.Difficulty == MealStack.Infrastructure.Data.DifficultyLevel.Easy ? "success" : Model.Difficulty == MealStack.Infrastructure.Data.DifficultyLevel.Medium ? "warning" : "danger")">
                            @Model.Difficulty
                        </span>
                    </div>

                    @if (Model.RecipeCategories != null && Model.RecipeCategories.Any())
                    {
                        <div class="modules-meta-item">
                            <i class="bi bi-tags text-primary"></i>
                            <div>
                                @foreach (var recipeCategory in Model.RecipeCategories)
                                {
                                    <span class="badge bg-@(string.IsNullOrEmpty(recipeCategory.Category.ColorClass) ? "secondary" : recipeCategory.Category.ColorClass) me-1">
                                        @recipeCategory.Category.Name
                                    </span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-4 mt-4 mt-lg-0">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-info-circle me-2 text-primary"></i>Recipe Info
                        </h5>
                        <div class="mb-2">
                            <small class="text-muted">Created by: @(Model.CreatedBy?.UserName ?? "Unknown")</small>
                        </div>
                        <div class="mb-2">
                            <small class="text-muted">Created on: @Model.CreatedDate.ToShortDateString()</small>
                        </div>
                        @if (Model.UpdatedDate.HasValue)
                        {
                            <div>
                                <small class="text-muted">Updated on: @Model.UpdatedDate.Value.ToShortDateString()</small>
                            </div>
                        }

                        <div class="mt-3">
                            @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || Model.CreatedById == Context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                            {
                                <div class="d-grid gap-2">
                                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-pencil me-1"></i> Edit Recipe
                                    </a>
                                    <a href="#" onclick="return confirmDelete(@Model.Id, '@Model.Title')" class="btn btn-outline-danger btn-sm">
                                        <i class="bi bi-trash me-1"></i> Delete Recipe
                                    </a>
                                </div>

                                <!-- Hidden form for delete submission -->
                                <form id="delete-form-@Model.Id" asp-action="Delete" asp-route-id="@Model.Id" method="post" style="display: none;">
                                    @Html.AntiForgeryToken()
                                </form>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <!-- Ingredients Section -->
        <div class="col-md-4 mb-4">
            <div class="modules-section">
                <h3 class="modules-section-title">
                    <i class="bi bi-basket me-2 text-primary"></i>Ingredients
                </h3>

                @if (string.IsNullOrEmpty(Model.Ingredients))
                {
                    <p class="text-muted">No ingredients listed.</p>
                }
                else
                {
                    <ul class="ingredients-list">
                        @foreach (var ingredient in Model.Ingredients.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                        {
                            <li>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="ingredient-@(Model.Ingredients.Split('\n').ToList().IndexOf(ingredient))">
                                    <label class="form-check-label" for="ingredient-@(Model.Ingredients.Split('\n').ToList().IndexOf(ingredient))">
                                        @ingredient.Trim()
                                    </label>
                                </div>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>

        <!-- Instructions Section -->
        <div class="col-md-8 mb-4">
            <div class="modules-section">
                <h3 class="modules-section-title">
                    <i class="bi bi-list-ol me-2 text-primary"></i>Instructions
                </h3>

                @if (string.IsNullOrEmpty(Model.Instructions))
                {
                    <p class="text-muted">No instructions provided.</p>
                }
                else
                {
                    var instructionsParagraphs = Model.Instructions.Split('\n', StringSplitOptions.RemoveEmptyEntries);

                    @if (instructionsParagraphs.Length == 1)
                    {
                        <p>@Model.Instructions</p>
                    }
                    else
                    {
                        <ol class="instructions-list">
                            @foreach (var instruction in instructionsParagraphs)
                            {
                                <li>@instruction.Trim()</li>
                            }
                        </ol>
                    }
                }
            </div>
        </div>
    </div>

    <!-- Additional Tools Section -->
    <div class="row mt-4 mb-5">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="bi bi-tools me-2 text-primary"></i>Cooking Tools
                    </h5>
                    <div class="row mt-3">
                        <div class="col-md-4 mb-3 mb-md-0">
                            <div class="d-grid">
                                <button type="button" class="btn btn-outline-primary" onclick="adjustServings()">
                                    <i class="bi bi-people me-2"></i>Adjust Servings
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3 mb-md-0">
                            <div class="d-grid">
                                <button type="button" class="btn btn-outline-success" onclick="printRecipe()">
                                    <i class="bi bi-printer me-2"></i>Print Recipe
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="d-grid">
                                <button type="button" class="btn btn-outline-info" onclick="shareRecipe()">
                                    <i class="bi bi-share me-2"></i>Share Recipe
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Back Button -->
    <div class="text-center mt-4">
        <a asp-action="Index" class="btn btn-secondary">
            <i class="bi bi-arrow-left me-1"></i>Back to Recipes
        </a>
    </div>
</div>

@section Scripts {
    <!-- AJAX token -->
    <partial name="_AjaxAntiForgeryToken" />
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        function confirmDelete(id, name) {
            if (confirm(`Are you sure you want to delete the modules "${name}"?`)) {
                document.getElementById(`delete-form-${id}`).submit();
            }
            return false;
        }

        function adjustServings() {
            alert('Servings adjustment feature coming soon!');
        }

        function printRecipe() {
            window.print();
        }

        function shareRecipe() {
            if (navigator.share) {
                navigator.share({
                    title: '@Model.Title',
                    text: '@Model.Description',
                    url: window.location.href,
                }).then(() => {
                    console.log('Thanks for sharing!');
                }).catch(console.error);
            } else {
                alert('Share feature coming soon!');
            }
        }

        // Favorites functionality
        $(document).ready(function() {
            $('.favorite-btn').on('click', function() {
                const btn = $(this);
                const modulesId = btn.closest('.favorite-container').data('modules-id');
                const isFavorite = btn.data('is-favorite') === true;
                
                // Prepare anti-forgery token
                const token = $('input[name="__RequestVerificationToken"]').val();
                
                // AJAX call to toggle favorite status
                $.ajax({
                    url: '/Recipe/ToggleFavorite',
                    type: 'POST',
                    data: { 
                        modulesId: modulesId,
                        __RequestVerificationToken: token 
                    },
                    success: function(result) {
                        if (result.success) {
                            // Update button appearance
                            if (result.isFavorite) {
                                btn.data('is-favorite', true);
                                btn.html('<i class="bi bi-heart-fill me-1"></i> Remove from Favorites');
                            } else {
                                btn.data('is-favorite', false);
                                btn.html('<i class="bi bi-heart me-1"></i> Add to Favorites');
                            }
                        }
                    }
                });
            });
        });
        
        // Debug form submission
        $(document).ready(function() {
            $('#modulesForm').on('submit', function(e) {
                console.log('Form submission:');
                
                // Log all form fields
                var formData = new FormData(this);
                for (var pair of formData.entries()) {
                    console.log(pair[0] + ': ' + pair[1]);
                }
                
                return true;
            });
        });
    </script>

    <style>
        /* Print styles */
        @@media print {
            header, footer, .modules-header .col-lg-4, .cooking-tools, .btn {
                display: none !important;
            }

            body {
                font-size: 12pt;
            }

            .modules-header {
                box-shadow: none !important;
                padding: 0 !important;
            }

            a {
                text-decoration: none !important;
                color: #000 !important;
            }
        }
    </style>
}