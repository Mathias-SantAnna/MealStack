@model MealStack.Infrastructure.Data.RecipeEntity

@{
ViewData["Title"] = Model.Title;
}

<div class="container py-4">
    <!-- Recipe Header -->
    <div class="recipe-header shadow-sm">
        <div class="row">
            <div class="col-lg-8">
                <h1 class="mb-3">@Model.Title</h1>
                <p class="lead">@Model.Description</p>

                <!-- Favorite Button -->
                @if (User.Identity.IsAuthenticated)
                {
                <div class="favorite-container mb-3" data-recipe-id="@Model.Id">
                    <button class="favorite-btn @(ViewBag.IsFavorited ? "favorited" : "")"
                            data-recipe-id="@Model.Id"
                            data-is-favorite="@(ViewBag.IsFavorited ? "true" : "false")"
                            aria-label="@(ViewBag.IsFavorited ? "Remove from favorites" : "Add to favorites")">
                        <i class="bi @(ViewBag.IsFavorited ? "bi-heart-fill text-danger" : "bi-heart") fs-5"></i>
                    </button>
                </div>
                }

                <!-- Rating System -->
                @if (User.Identity.IsAuthenticated)
                {
                <div class="rating-widget mb-3" data-recipe-id="@Model.Id" data-user-rating="@ViewBag.UserRating">
                    <h6>Rate this recipe:</h6>
                    <div class="rating-stars">
                        @for (int i = 1; i <= 5; i++)
                        {
                        <i class="bi bi-@(ViewBag.UserRating != null && ViewBag.UserRating >= i ? "star-fill" : "star") star-rating" data-rating="@i"></i>
                        }
                    </div>
                    <div class="current-rating mt-2">
                        Average: <span id="average-rating" class="average-rating">@Model.AverageRating.ToString("0.0")</span> stars
                        (<span id="total-ratings" class="total-ratings">@Model.TotalRatings</span> ratings)
                    </div>
                </div>
                }

                <!-- Recipe Meta Information -->
                <div class="recipe-meta">
                    <div class="recipe-meta-item">
                        <i class="bi bi-alarm text-primary"></i>
                        <span>Prep: @Model.PrepTimeMinutes min</span>
                    </div>
                    <div class="recipe-meta-item">
                        <i class="bi bi-fire text-primary"></i>
                        <span>Cook: @Model.CookTimeMinutes min</span>
                    </div>
                    <div class="recipe-meta-item">
                        <i class="bi bi-clock-history text-primary"></i>
                        <span>Total: @(Model.PrepTimeMinutes + Model.CookTimeMinutes) min</span>
                    </div>

                    <!-- Original Serving Size Display (no controls) -->
                    <div class="recipe-meta-item">
                        <i class="bi bi-people text-primary"></i>
                        <span>Serves: @Model.Servings</span>
                    </div>

                    <div class="recipe-meta-item">
                        <i class="bi bi-bar-chart text-primary"></i>
                        <span class="badge bg-@(Model.Difficulty == MealStack.Infrastructure.Data.DifficultyLevel.Easy ? "success" : Model.Difficulty == MealStack.Infrastructure.Data.DifficultyLevel.Medium ? "warning" : "danger")">
                            @Model.Difficulty
                        </span>
                    </div>

                    @if (Model.RecipeCategories != null && Model.RecipeCategories.Any())
                    {
                    <div class="recipe-meta-item">
                        <i class="bi bi-tags text-primary"></i>
                        <div>
                            @foreach (var recipeCategory in Model.RecipeCategories)
                            {
                            <span class="badge bg-@(string.IsNullOrEmpty(recipeCategory.Category.ColorClass) ? "secondary" : recipeCategory.Category.ColorClass) me-1">
                                        @recipeCategory.Category.Name
                                    </span>
                            }
                        </div>
                    </div>
                    }
                </div>
            </div>
            <div class="col-lg-4 mt-4 mt-lg-0">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-info-circle me-2 text-primary"></i>Recipe Info
                        </h5>
                        <div class="mb-2">
                            <small class="text-muted">Created by: @(Model.CreatedBy?.UserName ?? "Unknown")</small>
                        </div>
                        <div class="mb-2">
                            <small class="text-muted">Created on: @Model.CreatedDate.ToShortDateString()</small>
                        </div>
                        @if (Model.UpdatedDate.HasValue)
                        {
                        <div>
                            <small class="text-muted">Updated on: @Model.UpdatedDate.Value.ToShortDateString()</small>
                        </div>
                        }

                        <div class="mt-3">
                            @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || Model.CreatedById == Context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                            {
                            <div class="d-grid gap-2">
                                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-pencil me-1"></i> Edit Recipe
                                </a>
                                <a href="#" onclick="return RecipeModule.confirmDelete(@Model.Id, '@Model.Title')" class="btn btn-outline-danger btn-sm">
                                    <i class="bi bi-trash me-1"></i> Delete Recipe
                                </a>
                            </div>

                            <!-- Hidden form for delete submission -->
                            <form id="delete-form-@Model.Id" asp-action="Delete" asp-route-id="@Model.Id" method="post" style="display: none;">
                                @Html.AntiForgeryToken()
                            </form>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <!-- Ingredients Section -->
        <div class="col-md-4 mb-4">
            <div class="recipe-section">
                <h3 class="recipe-section-title">
                    <i class="bi bi-basket me-2 text-primary"></i>Ingredients
                </h3>

                @if (string.IsNullOrEmpty(Model.Ingredients))
                {
                <p class="text-muted">No ingredients listed.</p>
                }
                else
                {
                <ul class="ingredients-list">
                    @foreach (var ingredient in Model.Ingredients.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                    {
                    <li>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="ingredient-@(Model.Ingredients.Split('\n').ToList().IndexOf(ingredient))">
                            <label class="form-check-label" for="ingredient-@(Model.Ingredients.Split('\n').ToList().IndexOf(ingredient))">
                                @ingredient.Trim()
                            </label>
                        </div>
                    </li>
                    }
                </ul>
                }
            </div>
        </div>

        <!-- Instructions Section -->
        <div class="col-md-8 mb-4">
            <div class="recipe-section">
                <h3 class="recipe-section-title">
                    <i class="bi bi-list-ol me-2 text-primary"></i>Instructions
                </h3>

                @if (string.IsNullOrEmpty(Model.Instructions))
                {
                <p class="text-muted">No instructions provided.</p>
                }
                else
                {
                var instructionsParagraphs = Model.Instructions.Split('\n', StringSplitOptions.RemoveEmptyEntries);

                @if (instructionsParagraphs.Length == 1)
                {
                <p>@Model.Instructions</p>
                }
                else
                {
                <ol class="instructions-list">
                    @foreach (var instruction in instructionsParagraphs)
                    {
                    <li>@instruction.Trim()</li>
                    }
                </ol>
                }
                }
            </div>
        </div>
    </div>

    <!-- Cooking Tools Section -->
    <div class="row mt-4 mb-5 cooking-tools-section">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="bi bi-tools me-2 text-primary"></i>Cooking Tools
                    </h5>

                    <!-- Servings Adjustment Card -->
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">Adjust Serving</h6>
                        </div>
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Servings:</span>
                                        <input type="number" id="servings-input" class="form-control"
                                               min="1" max="100" value="@Model.Servings"
                                               data-original-servings="@Model.Servings">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="d-flex justify-content-end mt-2 mt-md-0">
                                        <button type="button" id="apply-servings" class="btn btn-success me-2">
                                            Apply
                                        </button>
                                        <button type="button" id="reset-servings" class="btn btn-outline-secondary">
                                            Reset
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-6 mb-3 mb-md-0">
                            <div class="d-grid">
                                <button type="button" class="btn btn-outline-success" id="print-recipe">
                                    <i class="bi bi-printer me-2"></i>Print Recipe
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-grid">
                                <button type="button" class="btn btn-outline-info" id="share-recipe">
                                    <i class="bi bi-share me-2"></i>Share Recipe
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notes Section -->
    @if (!string.IsNullOrEmpty(Model.Notes))
    {
    <div class="row mb-5">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="bi bi-journal-text me-2 text-primary"></i>Recipe Notes
                    </h5>
                </div>
                <div class="card-body">
                    <p>@Model.Notes</p>
                </div>
            </div>
        </div>
    </div>
    }

    <!-- Back Button -->
    <div class="text-center mt-4">
        <a asp-action="Index" class="btn btn-secondary">
            <i class="bi bi-arrow-left me-1"></i>Back to Recipes
        </a>
    </div>
</div>

@section Scripts {
<!-- Essential Scripts -->
<partial name="_AjaxAntiForgeryToken" />
<partial name="_ValidationScriptsPartial" />

<!-- Servings Module -->
<script src="~/js/modules/servings.js"></script>

<!-- Recipe Rating and Tools -->
<script src="~/js/modules/rating.js"></script>

<script>
    $(document).ready(function() {
        // Initialize ServingsModule
        if (typeof ServingsModule !== 'undefined') {
            ServingsModule.init();
        }

        // Print Recipe
        $('#print-recipe').on('click', function() {
            window.print();
        });

        // Share Recipe
        $('#share-recipe').on('click', function() {
            if (navigator.share) {
                navigator.share({
                    title: '@Model.Title',
                    text: '@Model.Description',
                    url: window.location.href,
                }).then(() => {
                    console.log('Recipe shared successfully');
                }).catch(console.error);
            } else {
                // Fallback for browsers without Web Share API
                navigator.clipboard.writeText(window.location.href).then(() => {
                    alert('Recipe link copied to clipboard!');
                }).catch(() => {
                    prompt('Share this recipe by copying the link below:', window.location.href);
                });
            }
        });
    });
</script>
}