@model IEnumerable<MealStack.Infrastructure.Data.Entities.RecipeEntity>

@{
    ViewData["Title"] = "My Recipes";
}

<!-- Page Header -->
<div class="container-fluid bg-light py-4 mb-4">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="mb-2">My Recipes</h1>
                <p class="text-muted">Manage your personal recipe collection.</p>
            </div>
            <div class="col-md-4 text-md-end mt-3 mt-md-0">
                <a asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-1"></i> Add New Recipe
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Search & Filter Section -->
<div class="container mb-4">
    <div class="card shadow-sm">
        <div class="card-body">
            <form id="filterForm" method="get" class="row g-3">
                <!-- Search Input -->
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" id="searchTerm" name="searchTerm" placeholder="Search my recipes..." value="@ViewData["SearchTerm"]">
                    </div>
                </div>

                <!-- Difficulty Filter -->
                <div class="col-md-2">
                    <select class="form-select" id="difficulty" name="difficulty">
                        <option value="">Any difficulty</option>
                        <option value="Easy">Easy</option>
                        <option value="Medium">Medium</option>
                        <option value="Hard">Hard</option>
                    </select>
                </div>

                <!-- Time Filter -->
                <div class="col-md-2">
                    <select class="form-select" id="timeFilter" name="timeFilter">
                        <option value="">Any time</option>
                        <option value="15">Under 15 min</option>
                        <option value="30">Under 30 min</option>
                        <option value="60">Under 1 hour</option>
                    </select>
                </div>

                <!-- Sort Option -->
                <div class="col-md-2">
                    <select class="form-select" id="sortBy" name="sortBy">
                        <option value="newest">Newest first</option>
                        <option value="oldest">Oldest first</option>
                        <option value="fastest">Quickest prep</option>
                    </select>
                </div>

                <!-- Submit Button -->
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary w-100">Apply</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Categories Quick Nav -->
<div class="container mb-4">
    <div class="d-flex overflow-auto pb-2">
        <a href="@Url.Action("MyRecipes")" class="btn @(ViewBag.SelectedCategoryId == null ? "btn-primary" : "btn-outline-primary") me-2 rounded-pill">All</a>
        @if (ViewBag.Categories != null)
        {
            foreach (var category in ViewBag.Categories)
            {
                <a href="@Url.Action("MyRecipes", new { categoryId = category.Id })"
                   class="btn @(ViewBag.SelectedCategoryId == category.Id ? "btn-primary" : "btn-outline-primary") me-2 rounded-pill"
                   style="@(string.IsNullOrEmpty(category.Color) ? "" : $"background-color: {(ViewBag.SelectedCategoryId == category.Id ? category.Color : "transparent")}; border-color: {category.Color}; color: {(ViewBag.SelectedCategoryId == category.Id ? "#fff" : category.Color)};")">
                    @category.Name
                </a>
            }
        }
    </div>
</div>

<!-- Message Alerts -->
@if (TempData["Message"] != null)
{
    <div class="container">
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Message"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

<!-- Recipe Grid -->
<div class="container mb-5">
    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <h5 class="alert-heading">No recipes found!</h5>
            <p>You haven't created any recipes yet. Click "Add New Recipe" to get started!</p>
            <a asp-action="Create" class="btn btn-success">Add Your First Recipe</a>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var recipe in Model)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card h-100 shadow-sm hover-scale">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="badge bg-@(recipe.Difficulty == MealStack.Infrastructure.Data.Entities.DifficultyLevel.Easy ? "success" :
                                                      recipe.Difficulty == MealStack.Infrastructure.Data.Entities.DifficultyLevel.Medium ? "warning" : "danger")">
                                    @recipe.Difficulty
                                </span>
                                <small class="text-muted">@(recipe.PrepTimeMinutes + recipe.CookTimeMinutes) min</small>
                            </div>

                            @if (recipe.RecipeCategories != null && recipe.RecipeCategories.Any())
                            {
                                <div class="mb-2">
                                    @foreach (var recipeCategory in recipe.RecipeCategories)
                                    {
                                        <span class="badge me-1" style="background-color: @(string.IsNullOrEmpty(recipeCategory.Category.Color) ? "#6c757d" : recipeCategory.Category.Color)">
                                            @recipeCategory.Category.Name
                                        </span>
                                    }
                                </div>
                            }

                            <h5 class="card-title">@recipe.Title</h5>
                            <p class="card-text text-truncate-3">@recipe.Description</p>

                            <div class="mt-3">
                                @if (!string.IsNullOrEmpty(recipe.Ingredients))
                                {
                                    var ingredients = recipe.Ingredients.Split('\n').Length;
                                    <span class="badge bg-light text-dark me-2">@ingredients ingredients</span>
                                }
                                <span class="badge bg-light text-dark">@recipe.Servings servings</span>
                            </div>
                        </div>
                        <div class="card-footer bg-white d-flex justify-content-between align-items-center">
                            <div class="btn-group" role="group">
                                <a asp-action="Edit" asp-route-id="@recipe.Id" class="btn btn-sm btn-outline-primary">
                                    <i class="bi bi-pencil me-1"></i> Edit
                                </a>
                                <a asp-action="Details" asp-route-id="@recipe.Id" class="btn btn-sm btn-outline-secondary">
                                    <i class="bi bi-eye me-1"></i> View
                                </a>
                                <a href="#" onclick="return confirmDelete(@recipe.Id, '@recipe.Title')" class="btn btn-sm btn-outline-danger">
                                    <i class="bi bi-trash me-1"></i> Delete
                                </a>

                                <!-- Hidden form for delete submission -->
                                <form id="delete-form-@recipe.Id" asp-action="Delete" asp-route-id="@recipe.Id" method="post" style="display: none;">
                                    @Html.AntiForgeryToken()
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        function confirmDelete(id, name) {
            if (confirm(`Are you sure you want to delete the recipe "${name}"?`)) {
                document.getElementById(`delete-form-${id}`).submit();
            }
            return false;
        }

        // Apply stored filter values on page load
        $(document).ready(function() {
            // Get URL parameters
            const urlParams = new URLSearchParams(window.location.search);

            // Set form values based on URL parameters
            if (urlParams.has('difficulty')) {
                $('#difficulty').val(urlParams.get('difficulty'));
            }

            if (urlParams.has('timeFilter')) {
                $('#timeFilter').val(urlParams.get('timeFilter'));
            }

            if (urlParams.has('sortBy')) {
                $('#sortBy').val(urlParams.get('sortBy'));
            }

            // Add hover effect for recipe cards
            $('.hover-scale').hover(
                function() { $(this).addClass('shadow'); },
                function() { $(this).removeClass('shadow'); }
            );
        });
    </script>
}