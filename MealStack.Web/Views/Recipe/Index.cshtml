@model IEnumerable<MealStack.Infrastructure.Data.Entities.RecipeEntity>

@{
    ViewData["Title"] = "All Recipes";
}

<!-- Recipe Collection Header -->
<div class="container-fluid bg-light py-4 mb-4">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="mb-2">All Recipes</h1>
                <p class="text-muted">Discover and explore delicious recipes from our community.</p>
            </div>
            <div class="col-md-4 text-md-end mt-3 mt-md-0">
                @if (User.Identity.IsAuthenticated)
                {
                    <a asp-action="Create" class="btn btn-primary">Create New Recipe</a>
                    <a asp-action="MyRecipes" class="btn btn-outline-secondary ms-2">My Recipes</a>
                }
                else
                {
                    <a asp-area="Identity" asp-page="/Account/Register" class="btn btn-outline-primary">Sign Up to Add Recipes</a>
                }
            </div>
        </div>
    </div>
</div>

<!-- Filters and Search Section -->
<div class="container mb-4">
    <div class="card shadow-sm">
        <div class="card-body">
            <form id="filterForm" method="get" class="row g-3">
                <!-- Search Input -->
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" id="searchTerm" name="searchTerm" placeholder="Search recipes..." value="@ViewData["SearchTerm"]">
                    </div>
                </div>

                <!-- Difficulty Filter -->
                <div class="col-md-2">
                    <select class="form-select" id="difficulty" name="difficulty">
                        <option value="">Any difficulty</option>
                        <option value="Easy">Easy</option>
                        <option value="Medium">Medium</option>
                        <option value="Hard">Hard</option>
                    </select>
                </div>

                <!-- Time Filter -->
                <div class="col-md-2">
                    <select class="form-select" id="timeFilter" name="timeFilter">
                        <option value="">Any time</option>
                        <option value="15">Under 15 min</option>
                        <option value="30">Under 30 min</option>
                        <option value="60">Under 1 hour</option>
                    </select>
                </div>

                <!-- Sort Option -->
                <div class="col-md-2">
                    <select class="form-select" id="sortBy" name="sortBy">
                        <option value="newest">Newest first</option>
                        <option value="oldest">Oldest first</option>
                        <option value="fastest">Quickest prep</option>
                    </select>
                </div>

                <!-- Submit Button -->
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Categories Quick Nav -->
<div class="container mb-4">
    <div class="d-flex overflow-auto pb-2">
        <a href="@Url.Action("Index")" class="btn @(ViewBag.SelectedCategoryId == null ? "btn-primary" : "btn-outline-primary") me-2 rounded-pill">All</a>
        @if (ViewBag.Categories != null)
        {
            foreach (var category in ViewBag.Categories)
            {
                <a href="@Url.Action("Index", new { categoryId = category.Id })"
                   class="btn @(ViewBag.SelectedCategoryId == category.Id ? "btn-primary" : "btn-outline-primary") me-2 rounded-pill"
                   style="@(string.IsNullOrEmpty(category.Color) ? "" : $"background-color: {(ViewBag.SelectedCategoryId == category.Id ? category.Color : "transparent")}; border-color: {category.Color}; color: {(ViewBag.SelectedCategoryId == category.Id ? "#fff" : category.Color)};")">
                    @category.Name
                </a>
            }
        }
    </div>
</div>

<!-- Recipe Grid -->
<div class="container mb-5">
    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <h5 class="alert-heading">No recipes found!</h5>
            <p>We couldn't find any recipes matching your criteria. Try adjusting your filters or be the first to add a recipe.</p>
            @if (User.Identity.IsAuthenticated)
            {
                <a asp-action="Create" class="btn btn-success">Add New Recipe</a>
            }
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var item in Model)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card h-100 shadow-sm hover-scale">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="badge bg-@(item.Difficulty == MealStack.Infrastructure.Data.Entities.DifficultyLevel.Easy ? "success" :
                                                      item.Difficulty == MealStack.Infrastructure.Data.Entities.DifficultyLevel.Medium ? "warning" : "danger")">
                                    @item.Difficulty
                                </span>
                                <small class="text-muted">@(item.PrepTimeMinutes + item.CookTimeMinutes) min</small>
                            </div>

                            @if (item.RecipeCategories != null && item.RecipeCategories.Any())
                            {
                                <div class="mb-2">
                                    @foreach (var recipeCategory in item.RecipeCategories)
                                    {
                                        <span class="badge me-1" style="background-color: @(string.IsNullOrEmpty(recipeCategory.Category.Color) ? "#6c757d" : recipeCategory.Category.Color)">
                                            @recipeCategory.Category.Name
                                        </span>
                                    }
                                </div>
                            }

                            <h5 class="card-title">@item.Title</h5>
                            <p class="card-text">@(item.Description?.Length > 100 ? item.Description.Substring(0, 97) + "..." : item.Description)</p>

                            <div class="mt-3">
                                @if (!string.IsNullOrEmpty(item.Ingredients))
                                {
                                    var ingredients = item.Ingredients.Split('\n').Length;
                                    <span class="badge bg-light text-dark me-2">@ingredients ingredients</span>
                                }
                                <span class="badge bg-light text-dark">@item.Servings servings</span>
                            </div>
                        </div>
                        <div class="card-footer bg-white d-flex justify-content-between align-items-center">
                            <div>
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">View</a>
                                @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || item.CreatedById == Context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                                {
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-secondary">Edit</a>
                                    <a href="#" onclick="return confirmDelete(@item.Id, '@item.Title')" class="btn btn-sm btn-outline-danger">Delete</a>

                                    <!-- Hidden form for delete submission -->
                                    <form id="delete-form-@item.Id" asp-action="Delete" asp-route-id="@item.Id" method="post" style="display: none;">
                                        @Html.AntiForgeryToken()
                                    </form>
                                }
                            </div>
                            <small class="text-muted">By @(item.CreatedBy?.UserName ?? "Unknown")</small>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Pagination -->
<div class="container mb-5">
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1">Previous</a>
            </li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    </nav>
</div>

@section Scripts {
    <script>
        function confirmDelete(id, name) {
            if (confirm(`Are you sure you want to delete the recipe "${name}"?`)) {
                document.getElementById(`delete-form-${id}`).submit();
            }
            return false;
        }

        // Apply stored filter values on page load
        $(document).ready(function() {
            // Get URL parameters
            const urlParams = new URLSearchParams(window.location.search);

            // Set form values based on URL parameters
            if (urlParams.has('difficulty')) {
                $('#difficulty').val(urlParams.get('difficulty'));
            }

            if (urlParams.has('timeFilter')) {
                $('#timeFilter').val(urlParams.get('timeFilter'));
            }

            if (urlParams.has('sortBy')) {
                $('#sortBy').val(urlParams.get('sortBy'));
            }

            // Add hover effect for recipe cards
            $('.hover-scale').hover(
                function() { $(this).addClass('shadow'); },
                function() { $(this).removeClass('shadow'); }
            );
        });
    </script>

    <style>
        .hover-scale {
            transition: transform 0.3s ease;
        }
        .hover-scale:hover {
            transform: translateY(-5px);
        }
    </style>
}