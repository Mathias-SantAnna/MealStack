@model MealStack.Web.Models.MealPlanViewModel
@{
ViewData["Title"] = Model.Name;
}

@functions {
public string GetMealTypeColor(MealStack.Infrastructure.Data.MealType mealType)
{
return mealType switch
{
MealStack.Infrastructure.Data.MealType.Breakfast => "bg-warning text-dark", 
MealStack.Infrastructure.Data.MealType.Lunch => "bg-info text-dark",       
MealStack.Infrastructure.Data.MealType.Dinner => "bg-primary text-white",
MealStack.Infrastructure.Data.MealType.Snack => "bg-success text-white",
_ => "bg-secondary text-white"
};
}
}

<div class="container py-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index">Meal Plans</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
        </ol>
    </nav>

    @if (TempData["Message"] != null)
    {
    <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
        <i class="bi bi-check-circle me-2"></i> @TempData["Message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    }
    @if (TempData["Error"] != null)
    {
    <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
        <i class="bi bi-exclamation-circle me-2"></i> @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    }

    <div class="row">
        <!-- Meal Plan Info Card -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">@Model.Name</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                    <p class="card-text">@Model.Description</p>
                    <hr />
                    }
                    <div class="mb-3">
                        <div class="d-flex justify-content-between mb-2">
                            <strong><i class="bi bi-calendar3 me-2 text-primary"></i>Date Range:</strong>
                            <span>@Model.DateRange</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <strong><i class="bi bi-clock me-2 text-primary"></i>Duration:</strong>
                            <span>@Model.Days days</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <strong><i class="bi bi-list-check me-2 text-primary"></i>Total Meals:</strong>
                            <span>@Model.MealItems.Count</span>
                        </div>
                    </div>
                    <div class="d-grid gap-2 mt-4">
                        <a asp-action="ShoppingList" asp-route-id="@Model.Id" class="btn btn-success">
                            <i class="bi bi-cart me-2"></i>View Shopping List
                        </a>
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-secondary">
                            <i class="bi bi-pencil me-2"></i>Edit Plan
                        </a>
                        <form asp-action="GenerateShoppingList" asp-route-id="@Model.Id" method="post" class="d-grid">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-outline-primary">
                                <i class="bi bi-arrow-repeat me-2"></i>Regenerate Shopping List
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Meal Plan Calendar -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Meal Schedule</h4>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addMealModal">
                        <i class="bi bi-plus-circle me-1"></i> Add Meal
                    </button>
                </div>
                <div class="card-body">
                    @if (!Model.MealItems.Any())
                    {
                    <div class="text-center py-5">
                        <div class="mb-3"><i class="bi bi-calendar-plus display-1 text-muted"></i></div>
                        <h5>No meals planned yet</h5>
                        <p class="text-muted">Click the "Add Meal" button to start planning your meals.</p>
                    </div>
                    }
                    else
                    {
                    var mealsByDate = Model.MealItems
                    .OrderBy(m => m.PlannedDate)
                    .ThenBy(m => m.MealType)
                    .GroupBy(m => m.PlannedDate.Date);

                    <div class="meal-calendar">
                        @foreach (var dayGroup in mealsByDate)
                        {
                        <div class="meal-day mb-4">
                            <div class="meal-day-header d-flex justify-content-between align-items-center mb-2">
                                <h5 class="mb-0">
                                    <i class="bi bi-calendar-date me-2 text-primary"></i>
                                    @dayGroup.Key.ToString("dddd, MMM d, yyyy")
                                </h5>
                                <span class="badge bg-primary rounded-pill">@dayGroup.Count() meal(s)</span>
                            </div>
                            <div class="meal-list">
                                @foreach (var meal in dayGroup)
                                {
                                <div class="meal-item card mb-2" id="meal-item-@meal.Id">
                                    <div class="card-body p-3">
                                        <div class="row align-items-center">
                                            <div class="col-auto">
                                                            <span class="meal-type-badge badge @GetMealTypeColor(meal.MealType)">
                                                                @meal.MealTypeDisplay
                                                            </span>
                                            </div>
                                            <div class="col">
                                                <h6 class="mb-1">@meal.RecipeTitle</h6>
                                                <div class="text-muted small">
                                                    <i class="bi bi-people me-1"></i> Servings: @meal.Servings
                                                    @if (!string.IsNullOrEmpty(meal.Notes))
                                                    {
                                                    <span class="ms-2"><i class="bi bi-info-circle me-1"></i> @meal.Notes</span>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-auto">
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-sm btn-outline-secondary edit-meal-btn"
                                                            data-bs-toggle="modal" data-bs-target="#editMealModal"
                                                            data-meal-id="@meal.Id"
                                                            data-recipe-id="@meal.RecipeId"
                                                            data-recipe-title="@meal.RecipeTitle"
                                                            data-planned-date="@meal.PlannedDate.ToString("yyyy-MM-dd")"
                                                            data-meal-type="@((int)meal.MealType)"
                                                            data-servings="@meal.Servings"
                                                            data-notes="@meal.Notes">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-outline-danger remove-meal-btn"
                                                            data-meal-id="@meal.Id"
                                                            data-meal-plan-id="@Model.Id"
                                                            data-recipe-title="@meal.RecipeTitle">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                }
                            </div>
                        </div>
                        }
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Meal Modal -->
<div class="modal fade" id="addMealModal" tabindex="-1" aria-labelledby="addMealModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMealModalLabel">Add Meal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addMealForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="AddMealPlanId" name="MealPlanId" value="@Model.Id" />
                    <div class="mb-3">
                        <label for="RecipeSearch" class="form-label">Select Recipe</label>
                        <select id="RecipeSearch" name="RecipeId" class="form-select" style="width: 100%;" required>
                            <option value="">Search for a recipe...</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="AddPlannedDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="AddPlannedDate" name="PlannedDate"
                               min="@Model.StartDate.ToString("yyyy-MM-dd")"
                               max="@Model.EndDate.ToString("yyyy-MM-dd")"
                               value="@DateTime.Today.ToString("yyyy-MM-dd")" required />
                    </div>
                    <div class="mb-3">
                        <label for="AddMealType" class="form-label">Meal</label>
                        <select class="form-select" id="AddMealType" name="MealType" required>
                            <option value="0">Breakfast</option>
                            <option value="1">Lunch</option>
                            <option value="2" selected>Dinner</option>
                            <option value="3">Snack</option>
                            <option value="4">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="AddServings" class="form-label">Servings</label>
                        <input type="number" class="form-control" id="AddServings" name="Servings"
                               min="1" max="20" value="2" required />
                        <div class="form-text">How many servings do you need for this meal?</div>
                    </div>
                    <div class="mb-3">
                        <label for="AddNotes" class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" id="AddNotes" name="Notes" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveMealBtn">Add Meal</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Meal Modal -->
<div class="modal fade" id="editMealModal" tabindex="-1" aria-labelledby="editMealModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMealModalLabel">Edit Meal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editMealForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="EditMealId" name="Id" />
                    <input type="hidden" id="EditMealPlanId" name="MealPlanId" value="@Model.Id" />
                    <input type="hidden" id="EditRecipeId" name="RecipeId" />
                    <div class="mb-3">
                        <label for="EditRecipeTitle" class="form-label">Recipe</label>
                        <input type="text" class="form-control" id="EditRecipeTitle" disabled />
                    </div>
                    <div class="mb-3">
                        <label for="EditPlannedDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="EditPlannedDate" name="PlannedDate" required
                               min="@Model.StartDate.ToString("yyyy-MM-dd")"
                               max="@Model.EndDate.ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="mb-3">
                        <label for="EditMealType" class="form-label">Meal</label>
                        <select class="form-select" id="EditMealType" name="MealType" required>
                            <option value="0">Breakfast</option>
                            <option value="1">Lunch</option>
                            <option value="2">Dinner</option>
                            <option value="3">Snack</option>
                            <option value="4">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="EditServings" class="form-label">Servings</label>
                        <input type="number" class="form-control" id="EditServings" name="Servings" min="1" max="20" required />
                    </div>
                    <div class="mb-3">
                        <label for="EditNotes" class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" id="EditNotes" name="Notes" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="updateMealBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
    $(document).ready(function() {
        constนิยมToken = $('input[name="__RequestVerificationToken"]').val();

        $('#RecipeSearch').select2({
            placeholder: 'Search for a recipe...',
            allowClear: true,
            dropdownParent: $('#addMealModal'),
            ajax: {
                url: '@Url.Action("GetRecipes", "MealPlan")',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return { term: params.term || '' };
                },
                processResults: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return { text: item.text, id: item.id, servings: item.servings, imagePath: item.imagePath };
                        })
                    };
                },
                cache: true
            },
            minimumInputLength: 1
        }).on('select2:select', function (e) {
            const data = e.params.data;
            $('#AddServings').val(data.servings || 2); 
        });

        // Add meal
        $('#saveMealBtn').click(function() {
            const form = $('#addMealForm');
            if (!form[0].checkValidity()) {
                form[0].reportValidity();
                return;
            }
            const formData = {
                MealPlanId: $('#AddMealPlanId').val(),
                RecipeId: $('#RecipeSearch').val(), 
                PlannedDate: $('#AddPlannedDate').val(),
                MealType: $('#AddMealType').val(),
                Servings: $('#AddServings').val(),
                Notes: $('#AddNotes').val()
            };

            $.ajax({
                url: '@Url.Action("AddMealItem", "MealPlan")',
                type: 'POST',
                data: formData,
                headers: { 'RequestVerificationToken': requestVerificationToken },
                success: function(response) {
                    if (response.success) {
                        window.location.reload();
                    } else {
                        alert('Error: ' + (response.message || (response.errors ? response.errors.join('\\n') : 'Failed to add meal. Please try again.')));
                    }
                },
                error: function() {
                    alert('Error: Failed to add meal. Please try again.');
                }
            });
        });

        // Edit meal modal setup
        $('#editMealModal').on('show.bs.modal', function (event) {
            const button = $(event.relatedTarget); 
            const modal = $(this);
            modal.find('#EditMealId').val(button.data('meal-id'));
            modal.find('#EditRecipeId').val(button.data('recipe-id'));
            modal.find('#EditRecipeTitle').val(button.data('recipe-title'));
            modal.find('#EditPlannedDate').val(button.data('planned-date'));
            modal.find('#EditMealType').val(button.data('meal-type'));
            modal.find('#EditServings').val(button.data('servings'));
            modal.find('#EditNotes').val(button.data('notes'));
        });

        // Update meal 
        $('#updateMealBtn').click(function() {
            const form = $('#editMealForm');
            if (!form[0].checkValidity()) {
                form[0].reportValidity();
                return;
            }
            const formData = {
                Id: $('#EditMealId').val(),
                MealPlanId: $('#EditMealPlanId').val(),
                RecipeId: $('#EditRecipeId').val(),
                PlannedDate: $('#EditPlannedDate').val(),
                MealType: $('#EditMealType').val(),
                Servings: $('#EditServings').val(),
                Notes: $('#EditNotes').val()
            };

            $.ajax({
                url: '@Url.Action("UpdateMealItem", "MealPlan")',
                type: 'POST',
                data: formData,
                headers: { 'RequestVerificationToken': requestVerificationToken },
                success: function(response) {
                    if (response.success) {
                        window.location.reload();
                    } else {
                        alert('Error: ' + (response.message || (response.errors ? response.errors.join('\\n') : 'Failed to update meal. Please try again.')));
                    }
                },
                error: function() {
                    alert('Error: Failed to update meal. Please try again.');
                }
            });
        });


        // Remove meal
        $(document).on('click', '.remove-meal-btn', function() { 
            const button = $(this);
            const itemId = button.data('meal-id');
            const mealPlanId = button.data('meal-plan-id');
            const recipeTitle = button.data('recipe-title');

            if (confirm(`Are you sure you want to remove "${recipeTitle}" from this meal plan?`)) {
                $.ajax({
                    url: '@Url.Action("RemoveMealItem", "MealPlan")',
                    type: 'POST',
                    data: { itemId: itemId, mealPlanId: mealPlanId },
                    headers: { 'RequestVerificationToken': requestVerificationToken },
                    success: function(response) {
                        if (response.success) {
                            $(`#meal-item-${itemId}`).fadeOut(300, function() {
                                $(this).remove();
                                $('.meal-day').each(function() {
                                    if ($(this).find('.meal-item').length === 0) {
                                        $(this).remove();
                                    }
                                });
                                
                                if ($('.meal-item').length === 0) {
                                    window.location.reload(); 
                                }
                            });
                        } else {
                            alert('Error: ' + (response.message || 'Failed to remove meal. Please try again.'));
                        }
                    },
                    error: function() {
                        alert('Error: Failed to remove meal. Please try again.');
                    }
                });
            }
        });
    });
</script>
}