@model IEnumerable<MealStack.Infrastructure.Data.Entities.IngredientEntity>

@{
    ViewData["Title"] = "Ingredients";
}

<div class="mb-4">
    <h1>Ingredients</h1>
    <p class="text-muted">Manage ingredients for use in your recipes.</p>
</div>

<div class="d-flex justify-content-between align-items-center mb-4">
    @if (User.Identity.IsAuthenticated)
    {
        <a asp-action="Create" class="btn btn-success">
            <i class="bi bi-plus-circle me-1"></i> Create New Ingredient
        </a>
    }
</div>

<partial name="_MessageAlerts" />

<!-- Search and Filters -->
<partial name="Components/Ingredient/_IngredientsFilter" model='(ViewBag.Categories as IEnumerable<string>, ViewBag.Measurements as IEnumerable<string>)' />

<!-- Ingredient Table -->
<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center bg-light">
        <h5 class="mb-0">Ingredient Dashboard</h5>
        <span class="badge bg-success rounded-pill">Total Ingredients: @ViewBag.TotalIngredients</span>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0" id="ingredientsTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Measurement</th>
                        <th>Description</th>
                        <th>Created By</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr data-category="@item.Category" data-measurement="@item.Measurement">
                            <td>@item.Name</td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.Category))
                                {
                                    <span class="badge bg-info text-dark">@item.Category</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>@(item.Measurement ?? "-")</td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    <span>@item.Description</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>@(item.CreatedBy?.UserName ?? "Unknown")</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-secondary">View</a>
                                    @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || item.CreatedById == Context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                                    {
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">Delete</a>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Pagination -->
    <partial name="Components/Ingredient/_Pagination" model="((int)ViewBag.CurrentPage, (int)ViewBag.TotalPages)" />
</div>

<!-- Statistics -->
<partial name="Components/Ingredient/_StatisticsCards" model="((int)ViewBag.TotalIngredients, (ViewBag.Categories as IEnumerable<string>).Count(), Model.Select(i => i.CreatedById).Distinct().Count())" />

@section Scripts {
    <script src="~/js/ingredients.js"></script>
}