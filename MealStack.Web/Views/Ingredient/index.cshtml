@model IEnumerable<MealStack.Infrastructure.Data.Entities.IngredientEntity>
@{
ViewData["Title"] = "Ingredients";
var totalIngredients = ViewBag.TotalIngredients ?? 0;
Layout = "_Layout";
}

<!-- Page Header -->
@{
ViewData["PageTitle"] = "Ingredients";
ViewData["PageDescription"] = "Browse and manage all ingredients in the system with advanced search and filtering.";
ViewData["ActionButtonText"] = User.Identity.IsAuthenticated ? "Create New Ingredient" : null;
ViewData["ActionButtonAction"] = "Create";
ViewData["ActionButtonController"] = "Ingredient";
ViewData["ShowButtonForAnonymous"] = "false";
}
<partial name="_PageHeader" />

<!-- Message Alerts -->
<partial name="_MessageAlerts" />

<div class="container">
    <!-- Search & Filters -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-search me-2"></i>Search & Filters
                </h5>
                <button class="btn btn-sm btn-outline-secondary" type="button"
                        data-bs-toggle="collapse" data-bs-target="#advancedFilters"
                        aria-expanded="false">
                    <i class="bi bi-sliders me-1"></i>Advanced
                </button>
            </div>
        </div>
        <div class="card-body">
            <form id="searchFilterForm" method="get" asp-action="Index">
                <!-- Basic Search Row -->
                <div class="row g-3 align-items-end mb-3">
                    <!-- Search Input with Autocomplete -->
                    <div class="col-md-5">
                        <label for="searchTerm" class="form-label">Search</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" id="searchTerm" name="searchTerm"
                                   placeholder="Search ingredients by name, category, or description..."
                                   value="@ViewData["SearchTerm"]" autocomplete="off">
                            <button type="button" class="btn btn-outline-secondary" id="clearSearch">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Sort By -->
                    <div class="col-md-3">
                        <label for="sortBy" class="form-label">Sort By</label>
                        <select class="form-select" id="sortBy" name="sortBy">
                            <option value="name" selected="@(ViewData["SortBy"]?.ToString() == "name")">Name A-Z</option>
                            <option value="name_desc" selected="@(ViewData["SortBy"]?.ToString() == "name_desc")">Name Z-A</option>
                            <option value="category" selected="@(ViewData["SortBy"]?.ToString() == "category")">Category</option>
                            <option value="measurement" selected="@(ViewData["SortBy"]?.ToString() == "measurement")">Measurement Type</option>
                            <option value="newest" selected="@(ViewData["SortBy"]?.ToString() == "newest")">Recently Added</option>
                            <option value="author" selected="@(ViewData["SortBy"]?.ToString() == "author")">Created By</option>
                        </select>
                    </div>

                    <!-- Actions -->
                    <div class="col-md-4">
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary flex-fill">
                                <i class="bi bi-search me-1"></i>Search
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="resetFilters">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Categories Filter -->
                @if (ViewBag.Categories != null)
                {
                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label">Categories</label>
                        <div class="d-flex flex-wrap gap-2">
                            <a href="@Url.Action("Index")"
                               class="btn @(ViewData["Category"] == null ? "btn-primary" : "btn-outline-primary") btn-sm">
                                All
                            </a>
                            @foreach (var category in ViewBag.Categories)
                            {
                            <a href="@Url.Action("Index", new { category = category, searchTerm = ViewData["SearchTerm"], sortBy = ViewData["SortBy"] })"
                               class="btn @(ViewData["Category"]?.ToString() == category ? "btn-primary" : "btn-outline-primary") btn-sm">
                                @category
                            </a>
                            }
                        </div>
                    </div>
                </div>
                }

                <!-- Advanced Filters (Collapsible) -->
                <div class="collapse" id="advancedFilters">
                    <div class="border-top pt-3">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label for="measurementFilter" class="form-label">Measurement Type</label>
                                <select class="form-select" id="measurementFilter" name="measurement">
                                    <option value="">All Measurements</option>
                                    @if (ViewBag.Measurements != null)
                                    {
                                    @foreach (var measurement in ViewBag.Measurements)
                                    {
                                    <option value="@measurement" selected="@(ViewData["Measurement"]?.ToString() == measurement)">
                                        @measurement
                                    </option>
                                    }
                                    }
                                </select>
                            </div>

                            <div class="col-md-4">
                                <label for="authorFilter" class="form-label">Created By</label>
                                <select class="form-select" id="authorFilter" name="createdBy">
                                    <option value="">All Authors</option>
                                    @if (ViewBag.Authors != null)
                                    {
                                    @foreach (var author in ViewBag.Authors)
                                    {
                                    <option value="@author.Id" selected="@(ViewData["CreatedBy"]?.ToString() == author.Id)">
                                        @author.Name
                                    </option>
                                    }
                                    }
                                </select>
                            </div>

                            <div class="col-md-4">
                                <label for="hasDescriptionFilter" class="form-label">Description Status</label>
                                <select class="form-select" id="hasDescriptionFilter" name="hasDescription">
                                    <option value="">Any</option>
                                    <option value="true" selected="@(ViewData["HasDescription"]?.ToString() == "true")">Has Description</option>
                                    <option value="false" selected="@(ViewData["HasDescription"]?.ToString() == "false")">No Description</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Hidden fields to maintain state -->
                <input type="hidden" name="page" value="@(ViewBag.CurrentPage ?? 1)" />
            </form>
        </div>
    </div>

    <!-- Main Content -->
    <div class="card shadow-sm">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Ingredients</h5>
            <div class="d-flex align-items-center gap-3">
                <span class="badge bg-primary rounded-pill" id="total-items-count">@(ViewBag.TotalItems ?? 0) total</span>
            </div>
        </div>

        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover table-striped mb-0" id="management-table">
                    <thead class="table-light">
                    <tr>
                        <th scope="col">Ingredient</th>
                        <th scope="col">Category</th>
                        <th scope="col">Measurement</th>
                        <th scope="col">Author</th>
                        <th scope="col">Created</th>
                        <th scope="col" style="width: 200px;">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (Model != null && Model.Any())
                    {
                    @foreach (var ingredient in Model)
                    {
                    <tr data-item-id="@ingredient.Id" class="management-table-row">
                        <td>
                            <a href="@Url.Action("Details", new { id = ingredient.Id })"
                               class="text-decoration-none fw-semibold">
                                @ingredient.Name
                            </a>
                            @if (!string.IsNullOrEmpty(ingredient.Description))
                            {
                            <div class="text-muted small">
                                @(ingredient.Description.Length > 60 ? ingredient.Description.Substring(0, 60) + "..." : ingredient.Description)
                            </div>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(ingredient.Category))
                            {
                            <span class="badge bg-info text-dark">@ingredient.Category</span>
                            }
                            else
                            {
                            <span class="text-muted">No category</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(ingredient.Measurement))
                            {
                            <span class="badge bg-secondary">@ingredient.Measurement</span>
                            }
                            else
                            {
                            <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            @if (ingredient.CreatedBy != null)
                            {
                            <div class="d-flex align-items-center">
                                <div class="rounded-circle bg-secondary text-white d-flex align-items-center justify-content-center me-2"
                                     style="width: 24px; height: 24px; font-size: 0.75rem; font-weight: 600;">
                                    @ingredient.CreatedBy.UserName.FirstOrDefault().ToString().ToUpper()
                                </div>
                                <span class="small">@ingredient.CreatedBy.UserName</span>
                            </div>
                            }
                            else
                            {
                            <span class="text-muted">Unknown</span>
                            }
                        </td>
                        <td class="text-nowrap">
                                        <span title="@ingredient.CreatedDate.ToString("F")">
                                            @ingredient.CreatedDate.ToString("MMM d, yyyy")
                                        </span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a asp-action="Details" asp-route-id="@ingredient.Id"
                                   class="btn btn-sm btn-outline-info" title="View details">
                                    <i class="bi bi-eye"></i>
                                    <span class="d-none d-lg-inline ms-1">View</span>
                                </a>
                                @if (User.Identity.IsAuthenticated)
                                {
                                var currentUserId = ViewContext.HttpContext.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                                if (User.IsInRole("Admin") || ingredient.CreatedById == currentUserId)
                                {
                                <a asp-action="Edit" asp-route-id="@ingredient.Id"
                                   class="btn btn-sm btn-outline-warning" title="Edit ingredient">
                                    <i class="bi bi-pencil"></i>
                                    <span class="d-none d-lg-inline ms-1">Edit</span>
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-danger delete-item-btn"
                                        data-item-id="@ingredient.Id" data-item-name="@ingredient.Name"
                                        title="Delete ingredient">
                                    <i class="bi bi-trash"></i>
                                    <span class="d-none d-lg-inline ms-1">Delete</span>
                                </button>
                                }
                                }
                            </div>

                            <!-- Hidden delete form -->
                            @if (User.Identity.IsAuthenticated)
                            {
                            var currentUserId = ViewContext.HttpContext.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                            if (User.IsInRole("Admin") || ingredient.CreatedById == currentUserId)
                            {
                            <form id="delete-form-@ingredient.Id" asp-action="Delete"
                                  asp-route-id="@ingredient.Id" method="post" style="display: none;">
                                @Html.AntiForgeryToken()
                            </form>
                            }
                            }
                        </td>
                    </tr>
                    }
                    }
                    else
                    {
                    <tr>
                        <td colspan="6" class="text-center py-5">
                            <div class="text-muted">
                                <i class="bi bi-inbox display-1 d-block mb-3"></i>
                                <h5>No ingredients found</h5>
                                <p>There are no ingredients matching your search criteria.</p>
                                @if (User.Identity.IsAuthenticated)
                                {
                                <a asp-action="Create" class="btn btn-primary">
                                    <i class="bi bi-plus-circle me-1"></i>Create First Ingredient
                                </a>
                                }
                            </div>
                        </td>
                    </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination Footer -->
        @if (ViewBag.TotalPages > 1)
        {
        <div class="card-footer bg-light">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center mb-0">
                    @if (ViewBag.CurrentPage > 1)
                    {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-page="@(ViewBag.CurrentPage - 1)"
                           asp-route-searchTerm="@ViewData["SearchTerm"]" asp-route-sortBy="@ViewData["SortBy"]"
                           asp-route-category="@ViewData["Category"]" asp-route-measurement="@ViewData["Measurement"]"
                           asp-route-createdBy="@ViewData["CreatedBy"]" asp-route-hasDescription="@ViewData["HasDescription"]">Previous</a>
                    </li>
                    }

                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-page="@i"
                           asp-route-searchTerm="@ViewData["SearchTerm"]" asp-route-sortBy="@ViewData["SortBy"]"
                           asp-route-category="@ViewData["Category"]" asp-route-measurement="@ViewData["Measurement"]"
                           asp-route-createdBy="@ViewData["CreatedBy"]" asp-route-hasDescription="@ViewData["HasDescription"]">@i</a>
                    </li>
                    }

                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-page="@(ViewBag.CurrentPage + 1)"
                           asp-route-searchTerm="@ViewData["SearchTerm"]" asp-route-sortBy="@ViewData["SortBy"]"
                           asp-route-category="@ViewData["Category"]" asp-route-measurement="@ViewData["Measurement"]"
                           asp-route-createdBy="@ViewData["CreatedBy"]" asp-route-hasDescription="@ViewData["HasDescription"]">Next</a>
                    </li>
                    }
                </ul>
            </nav>
        </div>
        }
    </div>

    <!-- Back Button -->
    <div class="text-center mt-4">
        <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i>Back to Home
        </a>
    </div>
</div>

@section Scripts {
<!-- jQuery UI for autocomplete -->
<link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>

<script>
    $(document).ready(function() {
        const IngredientsPage = {
            init: function() {
                this.setupSearch();
                this.setupDeleteButtons();
                this.setupAutocomplete();
            },

            setupAutocomplete: function() {
                $('#searchTerm').autocomplete({
                    source: function(request, response) {
                        $.ajax({
                            url: '@Url.Action("SearchIngredients")',
                            type: 'GET',
                            data: { term: request.term },
                            success: function(data) {
                                response($.map(data, function(item) {
                                    return {
                                        label: item.name,
                                        value: item.name
                                    };
                                }));
                            },
                            error: function() {
                                response([]);
                            }
                        });
                    },
                    minLength: 2,
                    select: function(event, ui) {
                        $(this).val(ui.item.value);
                        $('#searchFilterForm').submit();
                        return false;
                    }
                });
            },

            setupSearch: function() {
                const searchInput = $('#searchTerm');
                const clearBtn = $('#clearSearch');

                clearBtn.on('click', function() {
                    searchInput.val('').focus();
                    $('#searchFilterForm').submit();
                });

                $('#resetFilters').on('click', function() {
                    $('#searchFilterForm')[0].reset();
                    window.location.href = '@Url.Action("Index")';
                });

                $('#sortBy, #categoryFilter, #measurementFilter, #authorFilter, #hasDescriptionFilter').on('change', function() {
                    $('#searchFilterForm').submit();
                });
            },

            setupDeleteButtons: function() {
                $('.delete-item-btn').on('click', function() {
                    const itemId = $(this).data('item-id');
                    const itemName = $(this).data('item-name');

                    if (confirm(`Are you sure you want to delete "${itemName}"? This action cannot be undone.`)) {
                        $(`#delete-form-${itemId}`).submit();
                    }
                });
            }
        };

        IngredientsPage.init();
    });
</script>
}