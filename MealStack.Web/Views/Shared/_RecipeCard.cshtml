@model MealStack.Infrastructure.Data.RecipeEntity
@{
    var isFavorite = ViewBag.FavoriteRecipes != null && ((List<int>)ViewBag.FavoriteRecipes).Contains(Model.Id);
}

<div class="col-md-6 col-lg-4 recipe-card-wrapper">
    <div class="card h-100 shadow-sm hover-scale">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <span class="badge bg-@(Model.Difficulty == MealStack.Infrastructure.Data.DifficultyLevel.Easy ? "success" :
                                      Model.Difficulty == MealStack.Infrastructure.Data.DifficultyLevel.Medium ? "warning" : "danger")">
                    @Model.Difficulty
                </span>

                <!-- Heart button and Cook Time -->
                <div class="favorite-time-container d-flex flex-column align-items-end">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div class="favorite-container" data-recipe-id="@Model.Id">
                            <button class="btn btn-sm p-0 favorite-btn" data-is-favorite="@(isFavorite ? "true" : "false")">
                                <i class="bi @(isFavorite ? "bi-heart-fill text-danger" : "bi-heart") fs-5"></i>
                            </button>
                        </div>
                    }
                    
                    @{
                        var totalMinutes = Model.PrepTimeMinutes + Model.CookTimeMinutes;
                        var timeDisplay = totalMinutes >= 60 
                            ? $"{totalMinutes/60}h{(totalMinutes%60 > 0 ? $"{totalMinutes%60}m" : "")}"
                            : $"{totalMinutes}m";
                    }
                    <span class="cook-time">@timeDisplay</span>
                </div>
            </div>

            <!-- Rating stars -->
            <div class="d-flex align-items-center mb-2">
                <div class="rating-stars small" data-recipe-id="@Model.Id">
                    @{
                        var avgRating = Model.AverageRating;
                        for (int i = 1; i <= 5; i++)
                        {
                            if (i <= avgRating)
                            {
                                <i class="bi bi-star-fill text-warning"></i>
                            }
                            else if (i - 0.5 <= avgRating)
                            {
                                <i class="bi bi-star-half text-warning"></i>
                            }
                            else
                            {
                                <i class="bi bi-star text-warning"></i>
                            }
                        }
                    }
                </div>
                <span class="ms-2 text-muted small rating-count">(@Model.TotalRatings)</span>
            </div>

            @if (Model.RecipeCategories != null && Model.RecipeCategories.Any())
            {
                <div class="mb-2">
                    @foreach (var recipeCategory in Model.RecipeCategories)
                    {
                        <span class="badge bg-@(string.IsNullOrEmpty(recipeCategory.Category.ColorClass) ? "secondary" : recipeCategory.Category.ColorClass) me-1">
                            @recipeCategory.Category.Name
                        </span>
                    }
                </div>
            }

            <h5 class="card-title">@Model.Title</h5>
            <p class="card-text text-truncate-3">@Model.Description</p>

            <div class="mt-3">
                @if (!string.IsNullOrEmpty(Model.Ingredients))
                {
                    var ingredients = Model.Ingredients.Split('\n').Length;
                    <span class="badge bg-light text-dark me-2">@ingredients ingredients</span>
                }
                <span class="badge bg-light text-dark">@Model.Servings servings</span>
            </div>
        </div>
        <div class="card-footer bg-white d-flex justify-content-between align-items-center">
            <div class="btn-group" role="group">
                <a asp-controller="Recipe" asp-action="Details" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-eye me-1"></i> View
                </a>
                @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || Model.CreatedById == Context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                {
                    <a asp-controller="Recipe" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-secondary">
                        <i class="bi bi-pencil me-1"></i> Edit
                    </a>
                    <a href="#" onclick="return confirmDelete(@Model.Id, '@Model.Title')" class="btn btn-sm btn-outline-danger">
                        <i class="bi bi-trash me-1"></i> Delete
                    </a>
                    
                    <form id="delete-form-@Model.Id" asp-controller="Recipe" asp-action="Delete" asp-route-id="@Model.Id" method="post" style="display: none;">
                        @Html.AntiForgeryToken()
                    </form>
                }
            </div>
        </div>
    </div>
</div>